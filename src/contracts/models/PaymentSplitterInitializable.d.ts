/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PaymentSplitterInitializableInterface extends ethers.utils.Interface {
  functions: {
    "initialize(address[],uint256[])": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalReleased()": FunctionFragment;
    "shares(address)": FunctionFragment;
    "released(address)": FunctionFragment;
    "payee(uint256)": FunctionFragment;
    "release(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(functionFragment: "released", values: [string]): string;
  encodeFunctionData(functionFragment: "payee", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;

  events: {
    "PayeeAdded(address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "PaymentReleased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
}

export class PaymentSplitterInitializable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PaymentSplitterInitializableInterface;

  functions: {
    /**
     * Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.
     */
    initialize(
      payees: string[],
      shares_: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.
   */
  initialize(
    payees: string[],
    shares_: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Getter for the total shares held by payees.
   */
  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the total amount of Ether already released.
   */
  totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the amount of shares held by an account.
   */
  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the amount of Ether already released to a payee.
   */
  released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the address of the payee number `index`.
   */
  payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
   */
  release(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.
     */
    initialize(
      payees: string[],
      shares_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    PayeeAdded(
      account?: null,
      shares?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; shares: BigNumber }
    >;

    PaymentReceived(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    PaymentReleased(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    /**
     * Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.
     */
    initialize(
      payees: string[],
      shares_: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the address of the payee number `index`.
     */
    payee(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at the matching position in the `shares` array. All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no duplicates in `payees`.
     */
    initialize(
      payees: string[],
      shares_: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the total shares held by payees.
     */
    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the total amount of Ether already released.
     */
    totalReleased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of shares held by an account.
     */
    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the amount of Ether already released to a payee.
     */
    released(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the address of the payee number `index`.
     */
    payee(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.
     */
    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
