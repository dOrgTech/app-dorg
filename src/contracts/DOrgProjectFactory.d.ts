/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DOrgProjectFactoryInterface extends ethers.utils.Interface {
  functions: {
    "dOrgProjectLogic()": FunctionFragment;
    "gnosisLogic()": FunctionFragment;
    "treasuryWallet()": FunctionFragment;
    "createProject(string,address,address[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dOrgProjectLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gnosisLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, string[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "dOrgProjectLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gnosisLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;

  events: {
    "ProjectCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export class DOrgProjectFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DOrgProjectFactoryInterface;

  functions: {
    dOrgProjectLogic(overrides?: CallOverrides): Promise<[string]>;

    gnosisLogic(overrides?: CallOverrides): Promise<[string]>;

    treasuryWallet(overrides?: CallOverrides): Promise<[string]>;

    createProject(
      projectName: string,
      finderWallet: string,
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  dOrgProjectLogic(overrides?: CallOverrides): Promise<string>;

  gnosisLogic(overrides?: CallOverrides): Promise<string>;

  treasuryWallet(overrides?: CallOverrides): Promise<string>;

  createProject(
    projectName: string,
    finderWallet: string,
    owners: string[],
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    dOrgProjectLogic(overrides?: CallOverrides): Promise<string>;

    gnosisLogic(overrides?: CallOverrides): Promise<string>;

    treasuryWallet(overrides?: CallOverrides): Promise<string>;

    createProject(
      projectName: string,
      finderWallet: string,
      owners: string[],
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProjectCreated(
      projectAddress?: null,
      gnosisSafeAddress?: null
    ): TypedEventFilter<
      [string, string],
      { projectAddress: string; gnosisSafeAddress: string }
    >;
  };

  estimateGas: {
    dOrgProjectLogic(overrides?: CallOverrides): Promise<BigNumber>;

    gnosisLogic(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    createProject(
      projectName: string,
      finderWallet: string,
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dOrgProjectLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnosisLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProject(
      projectName: string,
      finderWallet: string,
      owners: string[],
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
